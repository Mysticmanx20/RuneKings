namespace = vampyre

##############################################
######COVERT TO VAMPYRE SCHEME EVENTS######
##############################################

#Do I want to go ahead with this?
vampyre.2001 = { #by Mathilda Bjarnehed
	type = character_event
	title = witch.2001.t
	desc = {
		desc = witch.2001.start.desc
		first_valid = {
			triggered_desc = {
				trigger = { trait_is_shunned_or_criminal_in_my_or_lieges_faith_trigger = { TRAIT = witch GENDER_CHARACTER = root } }
				desc = witch.2001.secrecy.desc
			}
			desc = witch.2001.no_secrecy.desc
		}
		desc = witch.2001.end.desc
	}
	theme = witchcraft
	override_background = {
		reference = sitting_room
	}
	left_portrait = scope:target
	
	#Yes
	option = {
		name = witch.2001.a
		custom_tooltip = witch.2001.a.tt

		if = {
			limit = { scope:target = { is_ai = no } }
			scope:target = {
				trigger_event = {
					id = vampyre.2002
					days = 3
				}
			}
		}
		else_if = {
			limit = { exists = scope:scheme_successful }
			trigger_event = {
				id = vampyre.2003
				days = 3
			}
		}
		else = {
			trigger_event = {
				on_action = convert_to_vamp_failure_outcome
				days = 3
			}
		}

		ai_chance = {
			base = 100
		}
	}

	#No
	option = {
		name = {
			trigger = {
				use_convert_to_witchcraft_secrecy_trigger = { OWNER = root }
			}
			text = witch.2001.b1
		}
		name = {
			trigger = {
				use_convert_to_witchcraft_secrecy_trigger = { OWNER = root }
			}
			text = witch.2001.b2
		}
		scope:scheme = {
			end_scheme = yes
		}

		ai_chance = {
			base = 0
		}
	}
}

#Someone is trying to convert me to become a witch (player only)
vampyre.2002 = { #by Mathilda Bjarnehed
	type = character_event
	title = witch.2002.t
	desc = {
		desc = witch.2002.start.desc
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:scheme_discovered }
				desc = witch.2002.discovery.desc
			}
			desc = witch.2002.no_discovery.desc
		}
		desc = witch.2002.end.desc
	}
	theme = witchcraft
	override_background = {
		reference = sitting_room
	}
	left_portrait = {
		character = scope:left_portrait
		triggered_animation = {
			trigger = { scope:left_portrait = root }
			animation = disbelief
		}
		animation = personality_dishonorable
	}
	cooldown = { years = 10 }
	
	immediate = {
		if = {
			limit = { exists = scope:scheme_discovered }
			scope:owner = {
				save_scope_as = left_portrait
				show_as_tooltip = {
					random_secret = {
						limit = {
							secret_type = secret_witch
							NOT = { is_known_by = root }
						}
						reveal_to = root
					}
				}
			}
		}
		else = {
			save_scope_as = left_portrait
		}
	}

	#Yes I want to be a witch
	option = {
		name = witch.2002.a

		add_trait = vampyrized

		if = {
			limit = {
				faith = {
					NOT = { has_doctrine_parameter = witchcraft_accepted }
				}
			}
			add_piety = medium_piety_loss
		}
		
		scope:owner = {
			trigger_event = vampyre.2003
		}

		stress_impact = {
			zealous = massive_stress_impact_gain
			craven = medium_stress_impact_gain
		}
	}

	#No I don't want to be a witch
	option = {
		name = witch.2002.b

		add_piety = medium_piety_gain

		scope:owner = {
			trigger_event = vampyre.2004
		}

		if = {
			limit = { exists = scope:scheme_discovered }
			reverse_add_opinion = {
				target = scope:owner
				modifier = disappointed_opinion
				opinion = -15
			}
		}

		stress_impact = {
			ambitious = minor_stress_impact_gain
		}
	}
	
}	



vampyre.2003 = { #by Mathilda Bjarnehed
	type = character_event
	title = witch.2003.t
	desc = witch.2003.desc
	theme = witchcraft
	override_background = {
		reference = sitting_room
	}
	left_portrait = {
		character = scope:target
		animation = personality_rational
	}
	immediate = {
		scope:target = {
			add_trait = vampyrized
			
		}
		if = {
			limit = { exists = scope:scheme_discovered }
			random_secret = {
				limit = {
					secret_type = secret_witch
					NOT = { is_known_by = scope:target }
				}
				reveal_to = scope:target
			}

			reverse_add_opinion = {
				target = scope:target
				modifier = grateful_opinion
				opinion = 20
			}
		}
	}

	#Great!
	option = {
		
		name = witch.2003.a

		scope:scheme = {
			end_scheme = yes
		}
	}


	after = {
		#Handle discover
		if = {
			limit = {
				exists = scope:scheme_discovered
				scope:target = {
					is_ai = yes
					OR = {
						AND = {
							is_ruler = no
							exists = liege
							liege = {
								witch_2003_can_learn_owner_secret = yes
								NOT = { this = scope:owner }
							}
						}
						any_relation = { type = lover witch_2003_can_learn_owner_secret = yes }
						any_consort = { witch_2003_can_learn_owner_secret = yes }
						any_child = {
							age >= 7
							witch_2003_can_learn_owner_secret = yes
						}
					}
				}
			}
			#Trigger the Overheard-event for the Scheme Owner
			trigger_event = vampyre.2010
		}
	}
}

#Success, but discovered
vampyre.2010 = { #by Mathilda Bjarnehed
	type = character_event
	title = witch.2010.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					any_secret = {
						secret_type = secret_witch
						is_known_by = scope:target
					}
				}
				desc = witch.talk.2010
			}
			desc = witch.leave.2010
		}
		desc = witch.end.2010
	}
	theme = witchcraft
	override_background = {
		reference = sitting_room
	}
	left_portrait = {
		character = scope:target
		animation = personality_rational
	}
	
	immediate = {
		hidden_effect = {
			scope:target = {
				random_list = {
					3 = {
						trigger = {
							is_ruler = no
							exists = liege
							liege = {
								witch_2003_can_learn_owner_secret = yes
								NOT = { this = scope:owner }
							}
						}
						liege = { save_scope_as = listener }
					}
					5 = {
						trigger = {
							any_relation = { 
								type = lover 
								witch_2003_can_learn_owner_secret = yes 
							}
						}
						random_relation = {
							type = lover
							limit = { witch_2003_can_learn_owner_secret = yes }
							save_scope_as = listener
						}
					}
					5 = {
						trigger = {
							any_consort = { witch_2003_can_learn_owner_secret = yes }
						}
						random_consort = {
							limit = { witch_2003_can_learn_owner_secret = yes }
							save_scope_as = listener
						}
					}
					1 = {
						trigger = {
							any_child = {
								age >= 7
								witch_2003_can_learn_owner_secret = yes
							}
						}
						random_child = {
							limit = {
								age >= 7
								witch_2003_can_learn_owner_secret = yes
							}
							save_scope_as = listener
						}
					}
				}
			}
			#Let's notify the Listener that they learned the secret
			scope:listener = {
				send_interface_message = {
					type = event_witchcraft_neutral
					title = witch.2010.message
					left_icon = scope:owner
					scope:owner = {
						random_secret = {
							limit = { secret_type = secret_witch }
							reveal_to = scope:listener
						}
					}
				}
			}
		}
	}
	option = {
		name = witch.2010.a
		custom_tooltip = witch.2010.a.tt
	}
}


#FAILURE EVENTS

#They refuse
vampyre.2004 = { #by Mathilda Bjarnehed
	type = character_event
	title = witch.2004.t
	desc = {
		desc = witch.2004.start.desc
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:scheme_discovered }
				desc = witch.2004.discovered.desc
			}
			desc = witch.2004.not_discovered.desc
		}
	}
	theme = witchcraft
	override_background = {
		reference = sitting_room
	}
	left_portrait = {
		character = scope:target
		animation = anger
	}

	immediate = {
		if = {
			limit = { exists = scope:scheme_discovered }
			random_secret = {
				limit = {
					secret_type = secret_witch
					NOT = { is_known_by = scope:target }
				}
				reveal_to = scope:target
			}
			reverse_add_opinion = {
				target = scope:target
				modifier = impious_opinion
				opinion = -20
			}
		}
		scope:target = {
			add_character_flag = {	
				flag = block_convert_to_vamp
				days = 7300
			}
		}
	}
	
	option = {
		name = witch.2004.a

		scope:scheme = {
			end_scheme = yes
		}
	}
}

#They tell their liege
vampyre.2005 = { #by Mathilda Bjarnehed
	type = character_event
	title = witch.2004.t
	desc = {
		desc = witch.2004.start.desc
		desc = witch.2005.end.desc
	}
	theme = witchcraft
	override_background = {
		reference = sitting_room
	}
	left_portrait = {
		character = scope:target
		animation = anger
	}
	trigger = {
		scope:target = {
			exists = liege
			is_ruler = no
			liege = { NOT = { this = scope:owner } }
		}
		exists = scope:scheme_discovered
	}

	weight_multiplier = {
		base = 1

		ai_value_modifier = {
			who = scope:target
			ai_zeal = 0.05
			max = 2
			min = -0.5
		}
		opinion_modifier = {
			who = scope:target
			opinion_target = root
			multiplier = -0.05
			max = 2
			min = -0.5
		}
	}


	immediate = {
		
		scope:target = {
			add_character_flag = {	
				flag = block_convert_to_vamp
				days = 7300
			}
		}
		reverse_add_opinion = {
			target = scope:target
			modifier = impious_opinion
			opinion = -20
		}
	}
	
	option = {
		name = witch.2005.a
		flavor = witch.2005.a.tt

		scope:scheme = {
			end_scheme = yes
		}
	}
}

